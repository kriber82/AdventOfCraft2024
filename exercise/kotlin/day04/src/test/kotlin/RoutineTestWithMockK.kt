import io.kotest.core.spec.style.StringSpec
import io.mockk.*
import routine.*

class RoutineTestWithMockK : StringSpec({

    lateinit var emailService: EmailService
    lateinit var scheduleService: ScheduleService
    lateinit var reindeerFeeder: ReindeerFeeder
    lateinit var routine: Routine

    beforeTest {
        // autogenerated test doubles. used as test dummies, unless further setup occurs in individual test
        emailService = mockk(relaxed = true)
        scheduleService = mockk(relaxed = true)
        reindeerFeeder = mockk(relaxed = true)

        routine = Routine(emailService, scheduleService, reindeerFeeder)
    }

    "should feed reindeers during routine" {
        routine.start()

        verify { reindeerFeeder.feedReindeers() } // here, reindeerFeeder is used as a mock
    }

    "should read new emails during routine" {
        routine.start()

        verify { emailService.readNewEmails() } // used as mock
    }

    "should organize day based on todays schedule during routine" {
        val todaysSchedule = Schedule()
        every { scheduleService.todaySchedule() } returns todaysSchedule // setup scheduleService as stub for todaySchedule

        routine.start()

        verify { scheduleService.organizeMyDay(todaysSchedule) } // scheduleService as mock for organizeMyDay. Verify that organizeMyDay has been called with the object returned by our stub
    }


    "should call continueDay after organizeMyDay" {
        routine.start()

        verifyOrder {
            scheduleService.organizeMyDay(any()) // used as mock
            scheduleService.continueDay() // used as mock
        }
    }

    "should not have any other interaction after continueDay" {
        routine.start()

        verifyOrder { // all used as mock
            scheduleService.todaySchedule()
            scheduleService.organizeMyDay(any())
            reindeerFeeder.feedReindeers()
            emailService.readNewEmails()
            scheduleService.continueDay()
        }

        //ensure no additional, unspecified interactions took place
        confirmVerified(scheduleService, reindeerFeeder, emailService)
    }

    "demonstrate spy to santa - should read new emails" {
        val spiedUpon = EmailServiceForTest()
        val emailServiceSpy = spyk(spiedUpon) //create spy (try not to use spies, if possible)
        routine = Routine(emailServiceSpy, scheduleService, reindeerFeeder)

        routine.start()

        verify { emailServiceSpy.readNewEmails() } // verify interaction through spy
        spiedUpon.assertEmailsHaveBeenRead() // just to demonstrate, that the calls end up on the spied-upon subject
    }

    // TODO assignment for santa (due end of jan 2025): create a test, using a spy for read-access

})